# mysql-plus

[![NPM Version](https://img.shields.io/npm/v/mysql-plus.svg)](https://www.npmjs.com/package/mysql-plus)
[![Build Status](https://travis-ci.org/nwoltman/node-mysql-plus.svg?branch=master)](https://travis-ci.org/nwoltman/node-mysql-plus)
[![Coverage Status](https://coveralls.io/repos/github/nwoltman/node-mysql-plus/badge.svg?branch=master)](https://coveralls.io/github/nwoltman/node-mysql-plus?branch=master)
[![dependencies Status](https://david-dm.org/nwoltman/node-mysql-plus/status.svg)](https://david-dm.org/nwoltman/node-mysql-plus)
[![devDependencies Status](https://david-dm.org/nwoltman/node-mysql-plus/dev-status.svg)](https://david-dm.org/nwoltman/node-mysql-plus?type=dev)

A MySQL client for Node.js that makes defining tables easy and automatically migrates table schemas.

This module extends the popular [`mysql2`](https://www.npmjs.com/package/mysql2) module, so it is recommended that you read the [`mysql` documentation](https://github.com/mysqljs/mysql#introduction), especially the sections on [connection options](https://github.com/mysqljs/mysql#connection-options), [performing queries](https://github.com/mysqljs/mysql#performing-queries), [escaping query values](https://github.com/mysqljs/mysql#escaping-query-values), and [escaping query identifiers](https://github.com/mysqljs/mysql#escaping-query-identifiers).

## Table of Contents

+ [Installation](#installation)
+ [Usage Example](#usage-example)
+ [API](#api)
  + Modules
    + [mysql-plus](#module_mysql-plus)
  + Classes
    + [PoolPlus](#PoolPlus)
    + [Connection](#Connection)
    + [MySQLTable](#MySQLTable)
  + Info
    + [Migration Strategies](#migration-strategies)
    + [Defining Table Schemas](#defining-table-schemas)
    + [Column Types](#column-types)
    + [Key Types](#key-types)

## Installation

```sh
npm install mysql-plus
# or
yarn add mysql-plus
```

## Usage Example

#### db.js

```js
const mysql = require('mysql-plus');
const pool = mysql.createPool({
  host: 'localhost',
  user: 'username',
  password: 'secret',
  database: 'my_db',
});
// Both `mysql` and `pool` are 100% compatible with the mysql module
module.exports = pool;
```

#### User.js

```js
const db = require('./db');

const userTable = db.defineTable('user', {
  columns: {
    id: db.ColTypes.bigint().unsigned().notNull().primaryKey().autoIncrement(),
    email: db.ColTypes.varchar(255).notNull().unique(),
    name: db.ColTypes.varchar(63).notNull(),
  },
});

const User = {
  async insertAndSelectExample() {
    const result = await userTable.insert({email: 'newuser@email.com', name: 'newuser'})
    const rows = await userTable.select('*', 'WHERE `id` = ?', [result.insertId]))
    console.log(rows); // [ { id: 1, email: 'newuser@email.com', name: 'newuser' } ]
    return rows[0];
  }
};

module.exports = User;
```

#### app.js (Express example)

```js
const db = require('./db');
const User = require('./User');
const express = require('express');
const app = express();

app.get('/user', async (req, res, next) => {
  try {
    const user = await User.insertAndSelectExample();
    res.send(user);
  } catch (err) {
    next(err)
  }
})

// Sync the table schemas to the database
db.sync((err) => {
  if (err) throw err;
  // Now the server can be safely started
  app.listen(/*...*/);
});
```


# API

{{>main}}

## Migration Strategies

The possible migration strategies are as follows:

+ `safe` - default in a production environment (`NODE_ENV === 'production'`)
+ `alter` - default in a development environment
+ `drop`

In addition to being the default in a production environment, the `safe` strategy is the only allowed strategy in production. This means that if `alter` or `drop` are used anywhere to configure connections or tables, they will be ignored and `safe` will be used instead. However, it is possible to override this behavior to allow the `alter` strategy in production by setting the `allowAlterInProduction` option to `true` in the [Pool configuration](#mysql-pluscreatepoolconfig--poolplus).

### safe

Only allows newly-defined tables to be created. Existing tables are never changed in any way.

### alter

Specifies that newly-defined tables will be created, existing tables that are no longer defined will be dropped, and existing tables that have a different definition from what is found in the database will be migrated with minimal data-loss.

**To rename table columns**, the column's old name must be specified in the [column definition](#columndefinition) with the `.oldName('name')` method. If it is not, the column will be dropped and all of the data that was in that column will be lost.

**Note:** It is up to you to understand how changes to an existing table might affect the data. For example, changing a DOUBLE column to a FLOAT will cause the precision of the value to be reduced so some significant digits may be lost (i.e. `1.123456789` would be reduced to `1.12346`). Furthermore, some changes to tables cannot be done and will cause an error. An example of this would be adding a column with the `NOT NULL` attribute to a non-empty table without specifying a default value.

##### Known Migrations That Will Not Work

+ Altering a column in a certain way when a different table references that column as a foreign key.
  + Normally this isn't a problem if the column type is being changed (since you'd also need to change the column type in the referencing table and `mysql-plus` can handle this case), but if only the column in the first table needs to change (such as modifying it's `AUTO_INCREMENT` value), the operation will fail because of the foreign key constraint.
  + **Workaround 1:** Manually remove the foreign key constraint from the referencing table (using SQL) before syncing.
  + **Workaround 2:** Remove the foreign key definition from the referencing table schema (i.e. by commenting it out) before syncing the column change, then restore the foreign key definition and re-sync.

### drop

All defined tables will be dropped and recreated.


## Defining Table Schemas

A schema is defined by a JavaScript object with certain properties. For `mysql-plus`, the schema properties can be broken down into four main types:

+ [Columns](#columns)
+ [Primary Key](#primary-key)
+ [Keys](#keys)
+ [Table Options](#table-options)

### Columns

Columns are defined using the `column` property which is an object where the keys are column names and the values are [column definitions](#columndefinition) of a certain [type](#column-types).

**Example:**
```js
{
  columns: {
    id: pool.ColTypes.bigint().unsigned().notNull().primaryKey().autoIncrement(),
    email: pool.ColTypes.varchar(255).notNull().unique(),
    points: pool.ColTypes.int().unsigned().default(0),
  }
}
```

See the [Column Types](#column-types) section for all possible column types and attributes that can be defined.

### Primary Key

`string | string[]`

The tableâ€™s primary key can be defined with the `primaryKey` property.

```js
{
  columns: {
    id: pool.ColTypes.int().unsigned().notNull(),
    name: pool.ColTypes.varchar(255).notNull(),
  },
  primaryKey: 'id'
}
```

An array can be used to define a multi-column primary key.

```js
{
  columns: {
    id: pool.ColTypes.int().unsigned().notNull(),
    name: pool.ColTypes.varchar(255).notNull(),
  },
  primaryKey: ['id', 'name']
}
```

Primary keys for string columns may include a key [prefix length](#prefix-lengths).

```js
{
  columns: {
    id: pool.ColTypes.varchar(100).unsigned().notNull(),
  },
  primaryKey: 'id(20)'
}
```

### Keys

Keys can be defined with the `keys` property, which is an array of [`KeyTypes`](#key-types):

```js
{
  columns: {
    id: pool.ColTypes.int().unsigned().notNull(),
    accountID: pool.ColTypes.int().unsigned().notNull(),
    email: pool.ColTypes.varchar(255).notNull(),
    location: pool.ColTypes.point().notNull(),
    description: pool.ColTypes.text(),
  },
  keys: [
    pool.KeyTypes.index('accountID'),
    pool.KeyTypes.uniqueIndex('email'),
    pool.KeyTypes.spatialIndex('location'),
    pool.KeyTypes.fulltextIndex('description'),
    pool.KeyTypes.foreignKey('accountID').references('account', 'id'),
  ]
}
```

See the [Key Types](#key-types) section for information on the different types of keys that can be defined.

### Table Options

These schema properties configure table-level options. The options currently supported are as follows:

+ `engine` - Specify the storage engine for the table (such as InnoDB or MyISAM)
+ `autoIncrement` - The initial `AUTO_INCREMENT` value for the table
+ `charset` - Specify a default character set for the table
+ `collate` - Specify a default collation for the table
+ `compression` - The compression algorithm used for page level compression (MySQL 5.7 + InnoDB only)
+ `rowFormat` - Defines the physical format in which the rows are stored

**Example:**
```js
{
  columns: {...},
  engine: 'MyISAM',
  autoIncrement: 5000000000
  charset: 'utf8mb4',
  collate: 'utf8mb4_unicode_520_ci',
  compression: 'LZ4',
  rowFormat: 'COMPACT',
}
```

**Note:** After explicitly defining a table option in a schema, if you remove it from the schema and resync your table definitions, the table option will not change in the database. To go back to the default value for the table option, you'll need to explicitly define it on the schema and resync the table (or manually change it on the command line), and then you may remove it from the schema.

## Column Types

+ [ColumnDefinition](#columndefinition)
  + [NumericColumnDefinition](#numericcolumndefinition)
  + [TextColumnDefinition](#textcolumndefinition)
  + [UpdatableTimeColumnDefinition](#updatabletimecolumndefinition)
    + [TimestampColumnDefinition](#timestampcolumndefinition)
  + [GeometryColumnDefinition](#geometrycolumndefinition)

[`mysql.ColTypes`](#module_mysql-plus..ColTypes) and [`pool.ColTypes`](#PoolPlus+ColTypes) both expose the following methods:

+ `tinyint([m])`
+ `smallint([m])`
+ `mediumint([m])`
+ `int([m])`
+ `integer([m])` - synonym for `int`
+ `bigint([m])`
+ `float([m [, d]])`
+ `double([m [, d]])`
+ `decimal([m [, d]])`
+ `dec([m [, d]])` - synonym for `decimal`
+ `numeric([m [, d]])` - synonym for `decimal`
+ `fixed([m [, d]])` - synonym for `decimal`
+ `bit([m])`
+ `bool()` - synonym for `tinyint(1)`
+ `boolean()` - synonym for `tinyint(1)`
+ `date()`
+ `datetime([m])`
+ `timestamp([m])`
+ `time([m])`
+ `year()`
+ `char([m])`
+ `varchar(m)`
+ `text([m])`
+ `tinytext()`
+ `mediumtext()`
+ `longtext()`
+ `binary([m])`
+ `varbinary(m)`
+ `blob([m])`
+ `tinyblob()`
+ `mediumblob()`
+ `longblob()`
+ `enum(...values)`
+ `set(...values)`
+ `json()`
+ `geometry()`
+ `point()`
+ `linestring()`
+ `polygon()`
+ `multipoint()`
+ `multilinestring()`
+ `multipolygon()`
+ `geometrycollection()`

All of these methods return a `ColumnDefinition` class.

#### ColumnDefinition

This class is what is used to define the column's attributes. These attributes can be set using the following methods:

+ `notNull()` - Adds the `NOT NULL` attribute
+ `default(value)` - Sets the column's `DEFAULT` value
  + Examples:
    + `.default('Hello')` produces `DEFAULT 'Hello'`
    + `.default(null)` produces `DEFAULT NULL`
  + __Note:__ `*blob`, `*text`, `json`, and geometry columns cannot be assigned a default value other than `null`.
+ `primaryKey()` - Declares the column to be the table's primary key
+ `unique()` - Creates a unique index for the column
+ `index()` - Creates an index for the column
+ `oldName(name: string)` - The previous/current column name. If a column with this name exists, it will be renamed to the column name associated with the column defintion so that the data in that column will not be lost.

All `ColumnDefinition` methods return the `ColumnDefinition`, so they are chainable.

Additionally, certain column types have type-specific methods. These are as follows:

#### NumericColumnDefinition

Methods:

+ `unsigned()` - Adds the `unsigned` attribute
+ `zerofill()` - Adds the `zerofill` attribute
+ `autoIncrement()` - Adds the `AUTO_INCREMENT` attribute

Compatible types:

+ `tinyint`
+ `smallint`
+ `mediumint`
+ `int`
+ `integer`
+ `bigint`
+ `float`
+ `double`
+ `decimal`
+ `dec`
+ `numeric`
+ `fixed`

#### TextColumnDefinition

Methods:

+ `charset(value)` - Sets the column's character set
+ `collate(value)` - Sets the column's collation
+ `fulltextIndex()` - Creates a [fulltext index](https://dev.mysql.com/doc/en/innodb-fulltext-index.html) for the column (excluding `enum` and `set` columns)

Compatible types:

+ `char`
+ `varchar`
+ `text`
+ `tinytext`
+ `mediumtext`
+ `longtext`
+ `enum`
+ `set`

#### UpdatableTimeColumnDefinition

Methods:

+ `defaultCurrentTimestamp()` - Adds the `DEFAULT CURRENT_TIMESTAMP` attribute
+ `onUpdateCurrentTimestamp()` - Adds the `ON UPDATE CURRENT_TIMESTAMP` attribute

Compatible types:

+ `datetime`
+ `timestamp`

#### TimestampColumnDefinition

Compatible types:

+ `timestamp`

There aren't any extra methods on this type, but there are some things to be aware of with `timestamp` columns:

##### NULL Timestamps

Normally, timestamp columns are `NOT NULL` by default, however, mysql-plus defines timestamp columns to be `NULL` by default to keep column definition semantics consistent. Therefore, the following column definition:

```js
{
  ts: ColTypes.timestamp(),
}
```

would define a column with this SQL:

```sql
`ts` timestamp NULL DEFAULT NULL
```

##### Timestamps' DEFAULT value

If a timestamp column is defined with the `notNull()` method, the column's `DEFAULT` value will be set to `CURRENT_TIMESTAMP`. So the following:

```js
{
  ts: ColTypes.timestamp().notNull(), // equivalent to `ColTypes.timestamp().notNull().defaultCurrentTimestamp()`
}
```

would define a column with this SQL:

```sql
`ts` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
```

Normally if the `DEFAULT` is unspecified, MySQL uses `CURRENT_TIMESTAMP` as the `DEFAULT` value of only the first timestamp column and `'0000-00-00 00:00:00'` for subsequent columns, but `mysql-plus` uses `CURRENT_TIMESTAMP` for all timestamp columns for consistency.

#### GeometryColumnDefinition

Methods:

+ `spatialIndex()` - Creates a [spatial index](https://dev.mysql.com/doc/en/create-index.html#create-index-spatial) for the column

Compatible types:

+ `geometry`
+ `point`
+ `linestring`
+ `polygon`
+ `multipoint`
+ `multilinestring`
+ `multipolygon`
+ `geometrycollection`

## Key Types

[`mysql.KeyTypes`](#module_mysql-plus..KeyTypes) and [`pool.KeyTypes`](#PoolPlus+KeyTypes) both expose the following methods for defining table keys:

+ `index(keyPart [, ...otherKeyParts])` - Creates a regular [index](https://dev.mysql.com/doc/en/create-index.html)
+ `uniqueIndex(keyPart [, ...otherKeyParts])` - Creates a [unique index](https://dev.mysql.com/doc/en/create-index.html#create-index-unique)
+ `spatialIndex(columnName)` - Creates a [spatial index](https://dev.mysql.com/doc/en/create-index.html#create-index-spatial)
+ `fulltextIndex(columnName, [...otherColumns])` - Creates a [fulltext index](https://dev.mysql.com/doc/en/innodb-fulltext-index.html)
+ `foreignKey(columnName [, ...otherColumns])` - Creates a [foreign key constraint](https://dev.mysql.com/doc/en/create-table-foreign-keys.html)

**Example:**
```js
{
  keys: [
    pool.KeyTypes.index('accountID'),
    pool.KeyTypes.uniqueIndex('email'),
    pool.KeyTypes.spatialIndex('location'),
    pool.KeyTypes.fulltextIndex('description'),
    pool.KeyTypes.foreignKey('accountID').references('account', 'id'),

    // Multi-column keys
    pool.KeyTypes.uniqueIndex('accountID', 'email'),
    pool.KeyTypes.foreignKey('userID', 'accountID').references('user', ['id', 'accountID']),
  ]
}
```

All key types have a `name` method that can be used to customize the keyâ€™s name (helpful if you need to use an [index hint](https://dev.mysql.com/doc/en/index-hints.html) in a query):

```js
{
  keys: [
    pool.KeyTypes.index('accountID').name('account_key'),
    pool.KeyTypes.uniqueIndex('email').name('email_key'),
    pool.KeyTypes.spatialIndex('location').name('location_key'),
    pool.KeyTypes.fulltextIndex('description').name('description_key'),
    pool.KeyTypes.foreignKey('accountID').references('account', 'id').name('account_foreign_key'),
  ]
}
```

### Foreign Keys

Foreign keys have the following additional methods:

+ `references(tableName, columns)` - Sets the name of the reference table (`string`) and the referenced columns (`string|Array<string>`)
+ `onDelete(action)` - Sets the foreign keyâ€™s `ON DELETE` action, where `action` is one of: `RESTRICT`, `CASCADE`, `SET NULL`, `NO ACTION`
+ `onUpdate(action)` - Sets the foreign keyâ€™s `ON UPDATE` action (with the same options as `onDelete`)
+ `cascade()` - Short for: `.onDelete('CASCADE').onUpdate('CASCADE')`

**Example:**
```js
{
  columns: {
    id: /* ... */,
    uid: /* ... */,
    userID: /* ... */,
    thingOne: /* ... */,
    thingTwo: /* ... */,
  },
  keys: [
    KeyTypes.foreignKey('id').references('other_table', 'id'),
    KeyTypes.foreignKey('uid').references('other_table', 'uid').cascade(),
    KeyTypes.foreignKey('userID').references('user', 'id').onDelete('CASCADE').onUpdate('SET NULL'),
    KeyTypes.foreignKey('thingOne', 'thingTwo').references('thing_table', ['one', 'two']),
  ]
}
```

**Note:** Foreign keys don't define indexes, but [_constraints_](https://dev.mysql.com/doc/en/glossary.html#glos_foreign_key_constraint). When defining foreign keys, the columns used in the key should also have an index.

Indexes required for the example above:

```js
{
  primaryKey: 'id',
  keys: [
    KeyTypes.uniqueIndex('uid'),
    KeyTypes.uniqueIndex('userID'),
    KeyTypes.index('thingOne', 'thingTwo'),
  ]
}
```

### Prefix Lengths

`PRIMARY`, `INDEX`, and `UNIQUE` keys on `char`, `varchar`, `binary`, `varbinary`, `blob`, and `text` columns may include a [key prefix length](https://dev.mysql.com/doc/en/create-index.html#create-index-column-prefixes).

```js
{
  columns: {
    id: ColTypes.char(50).notNull(),
    uid: ColTypes.varchar(100).notNull(),
    description: ColTypes.text(),
  },
  primaryKey: 'id(10)',
  keys: [
    KeyTypes.uniqueIndex('uid(30)'),
    KeyTypes.index('description(50)'),
  ]
```
