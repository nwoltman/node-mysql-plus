# mysql-plus

[![NPM Version](https://img.shields.io/npm/v/mysql-plus.svg)](https://www.npmjs.com/package/mysql-plus)
[![Build Status](https://travis-ci.org/nwoltman/node-mysql-plus.svg?branch=master)](https://travis-ci.org/nwoltman/node-mysql-plus)
[![Coverage Status](https://coveralls.io/repos/github/nwoltman/node-mysql-plus/badge.svg?branch=master)](https://coveralls.io/github/nwoltman/node-mysql-plus?branch=master)
[![dependencies Status](https://david-dm.org/nwoltman/node-mysql-plus/status.svg)](https://david-dm.org/nwoltman/node-mysql-plus)
[![devDependencies Status](https://david-dm.org/nwoltman/node-mysql-plus/dev-status.svg)](https://david-dm.org/nwoltman/node-mysql-plus?type=dev)

A MySQL client for Node.js with methods for defining tables with auto-migration and making basic queries.

This module extends the popular [`mysql`](https://www.npmjs.com/package/mysql) module, so it can be safely dropped in as a replacement for that module before using any of its additional features. It is recommended that you read the [documentation](https://github.com/mysqljs/mysql#introduction) for the `mysql` module, especially the sections on [connection options](https://github.com/mysqljs/mysql#connection-options), [performing queries](https://github.com/mysqljs/mysql#performing-queries), [escaping query values](https://github.com/mysqljs/mysql#escaping-query-values), and [escaping query identifiers](https://github.com/mysqljs/mysql#escaping-query-identifiers).

> Requires Node v4 or higher

## Table of Contents

+ [Installation](#installation)
+ [Usage Example](#usage-example)
+ [API](#api)
  + Modules
    + [mysql-plus](#module_mysql-plus)
  + Classes
    + [PoolPlus](#PoolPlus)
    + [MySQLTable](#MySQLTable)
  + Info
    + [Migration Strategies](#migration-strategies)
    + [Defining Table Schemas](#defining-table-schemas)
    + [Column Types](#column-types)
+ [Roadmap](#roadmap)

## Installation

```sh
npm install mysql-plus --save
```

## Usage Example

#### db.js

```js
const mysql = require('mysql-plus');
const pool = mysql.createPool({
  host: 'localhost',
  user: 'username',
  password: 'secret',
  database: 'my_db',
});
// Both `mysql` and `pool` are 100% compatible with the mysql module

module.exports = pool;
```

#### User.js

```js
const db = require('./db');

const userTable = db.defineTable('user', {
  columns: {
    id: db.Type.bigint().unsigned().notNull().primaryKey().autoIncrement(),
    email: db.Type.varchar(255).notNull().unique(),
    name: db.Type.varchar(63).notNull(),
  },
  autoIncrement: 5000000000,
});

const User = {
  insertAndSelectExample() {
    userTable.insert({email: 'newuser@email.com', name: 'newuser'}, (err, result) => {
      if (err) throw err;

      userTable.select('*', 'WHERE `id` = ' + result.insertId, (err, rows) => {
        if (err) throw err;
        console.log(rows);
        /*
          [{
            id: 5000000001,
            email: 'newuser@email.com',
            name: 'newuser'
          }]
        */
      });
    });
  }
};

module.exports = User;
```

#### app.js (Express example)

```js
const db = require('./db');
const express = require('express');
const app = express();

// Sync the table schemas to the database
db.sync((err) => {
  if (err) throw err;
  // Now the server can be safely started
  app.listen(/*...*/);
});
```


# API

{{>main}}

## Migration Strategies

The possible migration strategies are as follows:

+ `safe` - default in a production environment (`NODE_ENV === 'production'`)
+ `alter` - default in a development environment
+ `drop`

In addition to being the default in a production environment, the `safe` strategy is the only allowed strategy in production. This means that if `alter` or `drop` are used anywhere to configure your connections or tables, they will be ignored and `safe` will be used instead. However, if you really want to use `alter` in production, you may set the `allowAlterInProduction` option to `true` in your [Pool configuration](#mysql-pluscreatepoolconfig--poolplus).

#### safe

Only allows newly-defined tables to be created. Existing tables are never altered or dropped.

#### alter

Specifies that newly-defined tables will be created, existing tables that are no longer defined will be dropped, and existing tables that have a different definition from what is found in the database will be migrated with minimal data-loss.

**Note:** The migration cannot always retain data. Currently, the only known example is that renaming a column will not preserve its data (and it's possible that there are others). For this reason, and the fact that there is no reasonable way to test how well the migration will work on a live production database, using the `alter` strategy in production is discouraged.

#### drop

All defined tables will be dropped and recreated.


## Defining Table Schemas

A schema is defined by a JavaScript object with certain properties. For `mysql-plus`, the schema properties can be broken down into four main types:

+ [Columns](#columns)
+ [Keys](#keys)
+ [Foreign Keys](#foreign-keys)
+ [Table Options](#table-options)

### Columns

Columns are defined using the `column` property which is an object where the keys are column names and the values are [column definitions](#columndefinition) of a certain [type](#column-types).

**Example:**
```js
{
  columns: {
    id: pool.Type.bigint().unsigned().notNull().primaryKey().autoIncrement(),
    email: pool.Type.varchar(255).notNull().unique(),
    points: pool.Type.int().unsigned().default(0),
  }
}
```

See the [Column Types](#column-types) section for all possible column types and attributes that you can define.

### Keys

There are three properties that can be used to define different types of keys:

+ [`primaryKey`](#primarykey--stringstring)
+ [`uniqueKeys`](#uniquekeys--arraystringstring)
+ [`indexes`](#indexes--arraystringstring)

Note that [column definitions](#columndefinition) allow you to define these keys directly on the column. If you use that method of defining a key for a column, you should not define the key again using one of these properties.

#### `primaryKey` : `string|string[]`

Used to define the table's primary key. Its value is the name of one or more columns that make up the primary key.

**Example:**
```js
// Single column primary key
{
  primaryKey: 'id',
}

// Multi-column primary key
{
  primaryKey: ['userID', 'videoID'],
}
```

#### `uniqueKeys` : `Array.<string|string[]>`

Used to define the table's unique keys. Its value is an array where the elements are the names of one or more columns that make up a unique key.

**Example:**
```js
{
  uniqueKeys: [
    'email',    // Single column unique key
    ['a', 'b'], // Multi-column unique key
  ],
}
```

#### `indexes` : `Array.<string|string[]>`

Used to define the table's indexes. Its value is an array where the elements are the names of one or more columns that make up an index.

**Example:**
```js
{
  indexes: [
    'points',   // Single column index
    ['a', 'b'], // Multi-column index
  ],
}
```

### Foreign Keys

Foreign keys are defined using the `foreignKeys` property, which is an object that maps column names to a reference table column. The reference table column can be specified with either an object or a string of the form `<table name>.<column name>`. If an object, the following properties may be set: `table` (required), `column` (required), `onDelete`, `onUpdate`.

**Example:**
```js
{
  columns: {
    id: /* ... */,
    userID: /* ... */,
    thingOne: /* ... */,
    thingTwo: /* ... */,
  },
  foreignKeys: {
    // String with shorthand reference
    id: 'other_table.id', // shorthand for {table: 'other_table', column: 'id'}

    // Object reference with ON DELETE and ON UPDATE attributes
    userID: {
      table: 'user',
      column: 'id',
      onDelete: 'CASCADE',
      onUpdate: 'NO ACTION',
    },

    // Multi-column foreign key (uses comma-separated column names)
    'thingOne, thingTwo': {
      table: 'thing_table',
      column: ['one', 'two'],
    },
  },
}
```

**Note:** Foreign keys aren't actually keys, but "constraints". When defining foreign key constraints, the columns that make up the constraints should also be keys.

**Example:** Keys required for the example above
```js
{
  primaryKey: 'id',
  uniqueKeys: [
    'userID',
  ],
  indexes: [
    ['thingOne', 'thingTwo'],
  ],
}
```

### Table Options

These schema properties configure table-level options. The options currently supported are as follows:

+ `engine` - Specify the storage engine for the table (such as InnoDB or MyISAM)
+ `autoIncrement` - The initial `AUTO_INCREMENT` value for the table
+ `charset` - Specify a default character set for the table
+ `collate` - Specify a default collation for the table
+ `compression` - The compression algorithm used for page level compression (MySQL 5.7 + InnoDB only)
+ `rowFormat` - Defines the physical format in which the rows are stored

**Example:**
```js
{
  columns: {...},
  engine: 'MyISAM',
  autoIncrement: 5000000000
  charset: 'utf8mb4',
  collate: 'utf8mb4_unicode_ci',
  compression: 'LZ4',
  rowFormat: 'COMPACT',
}
```

**Note:** After explicitly defining a table option in your schema, if you remove it from your schema and resync your table definitions, the table option will not change in the database. If you want to go back to the default value for the table option, you'll need to explicitly define it on your schema and resync the table (or manually change it on the command line), and then you may remove it from your schema.

## Column Types

[`mysql.Type`](#module_mysql-plus..Type) and [`pool.Type`](#PoolPlus+Type) both expose the following methods:

+ `tinyint([m])`
+ `smallint([m])`
+ `mediumint([m])`
+ `int([m])`
+ `integer([m])`
+ `bigint([m])`
+ `float([m [, d]])`
+ `double([m [, d]])`
+ `decimal([m [, d]])`
+ `dec([m [, d]])`
+ `numeric([m [, d]])`
+ `fixed([m [, d]])`
+ `bit([m])`
+ `bool()`
+ `boolean()`
+ `date()`
+ `datetime([m])`
+ `timestamp([m])`
+ `time([m])`
+ `year()`
+ `char([m])`
+ `varchar(m)`
+ `text([m])`
+ `tinytext()`
+ `mediumtext()`
+ `longtext()`
+ `binary([m])`
+ `varbinary(m)`
+ `blob([m])`
+ `tinyblob()`
+ `mediumblob()`
+ `longblob()`
+ `enum(...values)`
+ `set(...values)`

All of these methods return a `ColumnDefinition` class.

#### ColumnDefinition

This class is what is used to define the column's attributes. These attributes can be set using the following methods:

+ `notNull()` - Adds the `NOT NULL` attribute
+ `default(value)` - Sets the column's `DEFAULT` value
+ `primaryKey()` - Declares the column to be the table's primary key
+ `unique()` - Declares the column as a unique index
+ `index()` - Declares the column as an index

All `ColumnDefinition` methods return the `ColumnDefinition`, so they are chainable.

Additionally, certain column types have type-specific methods. These are as follows:

#### NumericColumnDefinition

+ `unsigned()` - Adds the `unsigned` attribute
+ `zerofill()` - Adds the `zerofill` attribute
+ `autoIncrement()` - Adds the `AUTO_INCREMENT` attribute

Compatible types:

+ `tinyint`
+ `smallint`
+ `mediumint`
+ `int`
+ `integer`
+ `bigint`
+ `float`
+ `double`
+ `decimal`
+ `dec`
+ `numeric`
+ `fixed`

#### TextColumnDefinition

+ `charset(value)` - Sets the column's character set
+ `collate(value)` - Sets the column's collation

Compatible types:

+ `char`
+ `varchar`
+ `text`
+ `tinytext`
+ `mediumtext`
+ `longtext`
+ `enum`
+ `set`

#### UpdatableTimeColumnDefinition

+ `onUpdateCurrentTimestamp()` - Adds the `ON UPDATE CURRENT_TIMESTAMP` attribute

Compatible types:

+ `datetime`
+ `timestamp`


# Roadmap

+ Prepared statements
+ Travis CI tests with MySQL 5.7 (waiting on [this issue](https://github.com/travis-ci/travis-ci/issues/5122))
